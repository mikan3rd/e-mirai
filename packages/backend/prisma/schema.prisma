generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid                   String                 @id @db.VarChar(255)
  displayName           String?                @db.VarChar(255)
  email                 String?                @db.VarChar(255)
  role                  UserRole               @default(NONE)
  createdAt             DateTime               @default(now()) @db.DateTime(0)
  updatedAt             DateTime               @default(now()) @updatedAt @db.DateTime(0)
  themes                Theme[]
  userBoolChoiceAnswers UserBoolChoiceAnswer[]
  userChoices           UserChoice[]
}

model Theme {
  uuid                  String                 @id @default(uuid()) @db.VarChar(255)
  title                 String                 @unique @db.VarChar(255)
  description           String                 @db.Text
  isOfficial            Boolean
  answerType            AnswerType
  authorId              String                 @db.VarChar(255)
  deadline              DateTime               @db.DateTime(0)
  announcementDate      DateTime               @db.DateTime(0)
  createdAt             DateTime               @default(now()) @db.DateTime(0)
  updatedAt             DateTime               @default(now()) @updatedAt @db.DateTime(0)
  author                User                   @relation(fields: [authorId], references: [uid])
  answerChoices         AnswerChoice[]
  resultBoolChoice      ResultBoolChoice?
  resultChoice          ResultChoice?
  userboolChoiceAnswers UserBoolChoiceAnswer[]
  userChoices           UserChoice[]

  @@index([authorId], name: "authorId")
}

model UserBoolChoiceAnswer {
  uuid      String   @id @default(uuid()) @db.VarChar(255)
  themeId   String   @db.VarChar(255)
  userId    String   @db.VarChar(255)
  result    Boolean
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)
  theme     Theme    @relation(fields: [themeId], references: [uuid])
  user      User     @relation(fields: [userId], references: [uid])

  @@index([themeId], name: "themeId")
  @@index([userId], name: "userId")
}

model ResultBoolChoice {
  uuid       String   @id @default(uuid()) @db.VarChar(255)
  isOfficial Boolean
  themeId    String   @unique @db.VarChar(255)
  result     Boolean
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.DateTime(0)
  theme      Theme    @relation(fields: [themeId], references: [uuid])
}

model AnswerChoice {
  uuid                String               @id @default(uuid()) @db.VarChar(255)
  themeId             String               @db.VarChar(255)
  text                String               @db.VarChar(255)
  createdAt           DateTime             @default(now()) @db.DateTime(0)
  updatedAt           DateTime             @default(now()) @updatedAt @db.DateTime(0)
  theme               Theme                @relation(fields: [themeId], references: [uuid])
  resultChoiceAnswers ResultChoiceAnswer[]
  userChoiceAnswers   UserChoiceAnswer[]

  @@index([themeId], name: "themeId")
}

model UserChoice {
  uuid              String             @id @default(uuid()) @db.VarChar(255)
  themeId           String             @db.VarChar(255)
  userId            String             @db.VarChar(255)
  createdAt         DateTime           @default(now()) @db.DateTime(0)
  updatedAt         DateTime           @default(now()) @updatedAt @db.DateTime(0)
  theme             Theme              @relation(fields: [themeId], references: [uuid])
  user              User               @relation(fields: [userId], references: [uid])
  userChoiceAnswers UserChoiceAnswer[]

  @@index([themeId], name: "themeId")
  @@index([userId], name: "userId")
}

model UserChoiceAnswer {
  uuid            String       @id @default(uuid()) @db.VarChar(255)
  choiceUserId    String       @db.VarChar(255)
  choiceAnsewerId String       @db.VarChar(255)
  createdAt       DateTime     @default(now()) @db.DateTime(0)
  updatedAt       DateTime     @default(now()) @updatedAt @db.DateTime(0)
  answerChoice    AnswerChoice @relation(fields: [choiceAnsewerId], references: [uuid])
  userChoice      UserChoice   @relation(fields: [choiceUserId], references: [uuid])

  @@index([choiceAnsewerId], name: "choiceAnsewerId")
  @@index([choiceUserId], name: "choiceUserId")
}

model ResultChoice {
  uuid                String               @id @default(uuid()) @db.VarChar(255)
  isOfficial          Boolean
  themeId             String               @unique @db.VarChar(255)
  createdAt           DateTime             @default(now()) @db.DateTime(0)
  updatedAt           DateTime             @default(now()) @updatedAt @db.DateTime(0)
  theme               Theme                @relation(fields: [themeId], references: [uuid])
  resultChoiceAnswers ResultChoiceAnswer[]
}

model ResultChoiceAnswer {
  uuid            String       @id @default(uuid()) @db.VarChar(255)
  choiceResultId  String       @db.VarChar(255)
  choiceAnsewerId String       @db.VarChar(255)
  createdAt       DateTime     @default(now()) @db.DateTime(0)
  updatedAt       DateTime     @default(now()) @updatedAt @db.DateTime(0)
  answerChoice    AnswerChoice @relation(fields: [choiceAnsewerId], references: [uuid])
  resultChoice    ResultChoice @relation(fields: [choiceResultId], references: [uuid])

  @@index([choiceAnsewerId], name: "choiceAnsewerId")
  @@index([choiceResultId], name: "choiceResultId")
}

enum UserRole {
  NONE
  ADMIN
}

enum AnswerType {
  BOOL_CHOICE
  SINGLE_CHOICE
  MULTI_CHOICE
}
